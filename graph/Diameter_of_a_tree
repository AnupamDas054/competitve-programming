At first , find the longest distance node calling a dfs from any node and again call the dfs from that max distance node.


#include<bits/stdc++.h>
using namespace std;
vector< pair<int,int> > edge[200000];
int dis[200000];
void dfs(int pos, int par, int cost)
{
//    if(vis[pos])
//    {
//        return ;
//    }
//    vis[pos]=1;
    dis[pos]=dis[par]+cost;
    for(auto temp:edge[pos])
    {
        int to=temp.first;
        int cc=temp.second;
        if(to==par)
            continue ;
        dfs(to,pos,cc);
    }
}
int main()
{
    int t;
    cin>>t;
    for(int i=1;i<=t;i++)
    {

        int n;
        cin>>n;
        for(int j=0;j<=n;j++)
          dis[j]=0,edge[j].clear();
        for(int j=0;j<n-1;j++){
        int u,v,w;
        cin>>u>>v>>w;
        edge[u].push_back({v,w});
        edge[v].push_back({u,w});
        }
        dfs(0,0,0);
        int maxds=-1,maxid=0;

        for(int j=0;j<n;j++)
        {
            if(dis[j]>maxds)
            {
                maxds=dis[j];
                maxid=j;
            }
            dis[j]=0;
        }
     //   cout<<maxds<<" "<<maxid<<endl;
        dfs(maxid,maxid,0);
        int ans=dis[0];
        for(int j=0;j<n;j++)
        {
            ans=max(ans,dis[j]);
        }

        cout<<"Case "<<i<<": "<<ans<<endl;
    }
}

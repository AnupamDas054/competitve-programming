#include<bits/stdc++.h>

using namespace std;
#define mx 100005
int arr[mx];

struct info{
 long long prop,sum;
}tree[mx*3];

void tree_making(int node , int b ,int e)
{
    if(b==e)
    {
        tree[node].sum = arr[b];
        return ;
    }
    int left = node*2;
    int right= node*2 + 1;
    int mid=(b+e)/2;
    tree_making(left,b,mid);
    tree_making(right,mid+1,e);

    tree[node].sum=tree[left].sum+tree[right].sum;
}

void update(int node, int b, int e, int i , int j, int newvalue)
{
    if(i>e || j<b)
        return ;
    if(b>=i && e<=j)
    {
        tree[node].sum+=(e-b+1)*newvalue;
        tree[node].prop+=newvalue;
        return;

    }
    int left=node*2;
    int right=node*2+1;
    int mid=(b+e)/2;
    update(left,b,mid,i,j,newvalue);
    update(right,mid+1,e,i,j,newvalue);
    tree[node].sum=tree[left].sum+tree[right].sum+(e-b+1)*tree[node].prop;
}

int query(int node, int b, int e, int i, int j, int carry = 0)
{
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return tree[node].sum + carry * (e - b + 1);

    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;

    int p1 = query(Left, b, mid, i, j, carry + tree[node].prop);
    int p2 = query(Right, mid + 1, e, i, j, carry + tree[node].prop);

    return p1 + p2;
}

int main()
{
    int n;
    cin>>n;
    for(int i=1;i<=n;i++)
            cin>>arr[i];
    tree_making(1,1,n);
    update(1,1,n,3,4,5);
    cout<<query(1,1,n,3,4);
    return 0;
}

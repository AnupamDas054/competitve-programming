/*
    Edit Distance
    Memory: O(s1*s2)
    
    Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

    You have the following three operations permitted on a word:

    Insert a character
    Delete a character
    Replace a character

    Input: word1 = "horse", word2 = "ros"
    Output: 3
    Explanation: 
    horse -> rorse (replace 'h' with 'r')
    rorse -> rose (remove 'r')
    rose -> ros (remove 'e')

    
*/



  int minDistance(string word1, string word2) {
        int s1= word1.size();
        int s2= word2.size();
        int ED[s1+1][s2+1];
        memset(ED,0,sizeof ED);
        for(int i=0;i<=s1;i++)
        {
            for(int j=0;j<=s2;j++)
            {
                if(i==0 || j==0)
                {
                    ED[i][j]=max(i,j);// if one string is null , i need to take other strings whole length
                }
                else
                {
                    if(word1[i-1]==word2[j-1])
                    {
                        ED[i][j]=ED[i-1][j-1];
                    }
                    else
                    {
                        ED[i][j]=1+min({ED[i-1][j-1],ED[i-1][j],ED[i][j-1]});
                    }
                }
            }
        }
        return ED[s1][s2];
        
    }
